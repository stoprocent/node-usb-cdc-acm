{"version":3,"file":"split-descriptors.cjs.js","sources":["../src/split-descriptors.js"],"sourcesContent":["/* Copyright (c) 2010 - 2018, Nordic Semiconductor ASA\n *\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Nordic Semiconductor ASA nor the names of its\n *    contributors may be used to endorse or promote products derived from this\n *    software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\n// Quasi-trivial utility to parse USB descriptors from a Uint8Array\n// The first byte in the descriptor is the descriptor length, and they are just\n// concatenated together, so something like:\n// 5 X X X X 4 X X X 9 X X X X X X X X\n// should be splitted into\n// 5 X X X X  |  4 X X X   |  9 X X X X X X X X\n\n// Given a Uint8Array, returns an Array of Uint8Array\n// Each element of the resulting array is a subarray of the original Uint8Array.\nexport default function splitDescriptors(bytes) {\n    const descs = [];\n    if (!(bytes instanceof Uint8Array)) {\n        return descs;\n    }\n    let len = bytes.length;\n    let pointer = 0;\n\n    while (len > 0) {\n        const descLen = bytes[pointer];\n        if (descLen < 1) {\n            throw new Error('invalid descriptor length');\n        }\n        descs.push(bytes.subarray(pointer, pointer + descLen));\n        len -= descLen;\n        pointer += descLen;\n    }\n\n    // TODO: Consider handling if len !== 0 at this point.\n\n    return descs;\n}\n"],"names":["const","let"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,AAAe,SAAS,gBAAgB,CAAC,KAAK,EAAE;IAC5CA,IAAM,KAAK,GAAG,EAAE,CAAC;IACjB,IAAI,EAAE,KAAK,YAAY,UAAU,CAAC,EAAE;QAChC,OAAO,KAAK,CAAC;KAChB;IACDC,IAAI,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC;IACvBA,IAAI,OAAO,GAAG,CAAC,CAAC;;IAEhB,OAAO,GAAG,GAAG,CAAC,EAAE;QACZD,IAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;QAC/B,IAAI,OAAO,GAAG,CAAC,EAAE;YACb,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;SAChD;QACD,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC;QACvD,GAAG,IAAI,OAAO,CAAC;QACf,OAAO,IAAI,OAAO,CAAC;KACtB;;;;IAID,OAAO,KAAK,CAAC;CAChB;;;;"}