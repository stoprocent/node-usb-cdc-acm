{"version":3,"file":"usb-cdc-acm.cjs.js","sources":["../src/split-descriptors.js","../src/usb-cdc-acm.js"],"sourcesContent":["/* Copyright (c) 2010 - 2018, Nordic Semiconductor ASA\n *\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Nordic Semiconductor ASA nor the names of its\n *    contributors may be used to endorse or promote products derived from this\n *    software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\n// Quasi-trivial utility to parse USB descriptors from a Uint8Array\n// The first byte in the descriptor is the descriptor length, and they are just\n// concatenated together, so something like:\n// 5 X X X X 4 X X X 9 X X X X X X X X\n// should be splitted into\n// 5 X X X X  |  4 X X X   |  9 X X X X X X X X\n\n// Given a Uint8Array, returns an Array of Uint8Array\n// Each element of the resulting array is a subarray of the original Uint8Array.\nexport default function splitDescriptors(bytes) {\n    const descs = [];\n    if (!(bytes instanceof Uint8Array)) {\n        return descs;\n    }\n    let len = bytes.length;\n    let pointer = 0;\n\n    while (len > 0) {\n        const descLen = bytes[pointer];\n        if (descLen < 1) {\n            throw new Error('invalid descriptor length');\n        }\n        descs.push(bytes.subarray(pointer, pointer + descLen));\n        len -= descLen;\n        pointer += descLen;\n    }\n\n    // TODO: Consider handling if len !== 0 at this point.\n\n    return descs;\n}\n","/* Copyright (c) 2010 - 2018, Nordic Semiconductor ASA\n *\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Nordic Semiconductor ASA nor the names of its\n *    contributors may be used to endorse or promote products derived from this\n *    software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport { Duplex } from 'stream';\nimport Debug from 'debug';\nimport usb from 'usb';\nimport splitDescriptors from './split-descriptors';\n\n// Two debug levels: one for initialization/teardown messages, and one\n// for logging all data being sent/recv around\nconst debugInfo = Debug('usb-cdc-acm:info');\nconst debugData = Debug('usb-cdc-acm:data');\n\n\n// Utility function.\n// Given an interface, assert that it looks like a CDC management interface\n// Specifically, the interface must have only one\n// \"out\" interrupt endpoint, and a CDC Union descriptor.\n// Will return boolean `false` if the interface is not valid,\n// or an integer number (corresponding to the associated data interface)\nfunction assertCdcInterface(iface) {\n    const { endpoints, descriptor } = iface;\n\n    if (descriptor.bInterfaceClass !== usb.LIBUSB_CLASS_COMM || // 2, CDC\n        descriptor.bInterfaceSubClass !== 2) { // ACM\n        return false;\n    }\n\n    // Check it has only one endpoint, and of the right kind\n    if (endpoints.length !== 1 ||\n        endpoints[0].transferType !== usb.LIBUSB_TRANSFER_TYPE_INTERRUPT ||\n        endpoints[0].direction !== 'in') {\n        return false;\n    }\n\n    // node-usb doesn't parse the CDC Union descriptor inside the interface\n    // descriptor, so parse and find it manually here.\n    const additionalDescriptors = splitDescriptors(descriptor.extra);\n    let slaveInterfaceId = false;\n\n    for (let i = 0, l = additionalDescriptors.length; i < l; i += 1) {\n        const desc = additionalDescriptors[i];\n\n        // 0x24 = class-specific descriptor. 0x06 = CDC Union descriptor\n        if (desc[1] === 0x24 && desc[2] === 6) {\n            if (desc[3] !== iface.id) {\n                // Master interface should be the current one!!\n                return false;\n            }\n            [,,,, slaveInterfaceId] = desc; // slaveInterfaceId = desc[4];\n        }\n    }\n\n    if (slaveInterfaceId === false) {\n        // CDC Union descriptor not found, this is not a well-formed USB CDC ACM interface\n        return false;\n    }\n\n    return (slaveInterfaceId);\n}\n\n\n// Utility function.\n// Given an interface, assert that it looks like a CDC data interface\n// Specifically, the interface must have only one\n// \"in\" bulk endpoint and one \"out\" bulk endpoint.\nfunction assertDataInterface(iface) {\n    const { endpoints } = iface;\n\n    return (\n        // Right class (0x0A)\n        iface.descriptor.bInterfaceClass === usb.LIBUSB_CLASS_DATA &&\n        // Only two endpoints, and\n        endpoints.length === 2 &&\n        // both are bulk transfer, and\n        endpoints[0].transferType === usb.LIBUSB_TRANSFER_TYPE_BULK &&\n        endpoints[1].transferType === usb.LIBUSB_TRANSFER_TYPE_BULK &&\n        // their direction (in/out) is different\n        endpoints[0].direction !== endpoints[1].direction\n    );\n}\n\n\nexport default class UsbCdcAcm extends Duplex {\n    constructor(ifaceCdc, options = {}) {\n        const ifaceDataId = assertCdcInterface(ifaceCdc);\n        if (ifaceDataId === false) {\n            throw new Error('CDC interface is not valid');\n        }\n\n        const ifaceData = ifaceCdc.device.interfaces[ifaceDataId];\n        if (!assertDataInterface(ifaceData)) {\n            throw new Error('Data interface is not valid');\n        }\n\n        super(options);\n\n        this.ifaceCdc = ifaceCdc;\n        this.ifaceData = ifaceData;\n        this.device = ifaceCdc.device;\n\n        [this.ctr] = ifaceCdc.endpoints;\n\n        if (ifaceData.endpoints[0].direction === 'in') {\n            [this.in, this.out] = ifaceData.endpoints;\n        } else {\n            [this.out, this.in] = ifaceData.endpoints;\n        }\n\n        debugInfo('claiming interfaces');\n\n        this._reattachCdcDriverAtFinal = false;\n        this._reattachDataDriverAtFinal = false;\n        // Linux/mac need to detach the cdc-acm kernel driver, but\n        // windows users did that manually, and libusb-win just throws\n        // errors when detaching/attaching kernel drivers.\n        if (process.platform !== 'win32') {\n            if (ifaceCdc.isKernelDriverActive()) {\n                ifaceCdc.detachKernelDriver();\n                this._reattachCdcDriverAtFinal = true;\n            }\n\n            if (ifaceData.isKernelDriverActive()) {\n                ifaceData.detachKernelDriver();\n                this._reattachDataDriverAtFinal = true;\n            }\n        }\n        ifaceCdc.claim();\n        ifaceData.claim();\n\n        this.ctr.on('data', this._onStatus.bind(this));\n        this.ctr.on('error', this._onError.bind(this));\n        this.ctr.startPoll();\n\n\n        // Set baud rate and serial line params,\n        // then set the line as active\n        this._controlSetLineCoding(options.baudRate || 9600)\n            .then(() => { this._controlLineState(true); })\n            .then(() => { this._controlGetLineCoding(); })\n            .then(() => {\n                this.in.on('data', data => this._onData(data));\n                this.in.on('error', err => this.emit('error', err));\n                this.out.on('error', err => this.emit('error', err));\n\n                this.in.timeout = 1000;\n                this.out.timeout = 1000;\n            });\n    }\n\n    _read() {\n        debugData('_read');\n        if (!this.polling) {\n            debugInfo('starting polling');\n            this.in.startPoll();\n            this.polling = true;\n        }\n    }\n\n    _onData(data) {\n        debugData('_onData ', data);\n        const keepReading = this.push(data);\n        if (!keepReading) {\n            this._stopPolling();\n        }\n    }\n\n    _onError(err) {\n        debugInfo('Error: ', err);\n        this.emit('error', err);\n        //         throw err;\n    }\n\n    _onStatus(sts) { // eslint-disable-line class-methods-use-this\n        debugInfo('Status: ', sts);\n    }\n\n    _stopPolling() {\n        debugInfo('_stopPolling');\n        if (this.polling) {\n            debugInfo('stopping polling');\n            this.in.stopPoll();\n            this.polling = false;\n        }\n    }\n\n    _write(data, encoding, callback) {\n        debugData(`_write ${data.toString()}`);\n\n        this.out.transfer(data, callback);\n    }\n\n    _destroy() {\n        debugInfo('_destroy');\n\n        // Set line state as unused, close all resources, release interfaces\n        // (waiting until they are released), reattach kernel drivers if they\n        // were attached before, then emit a 'close' event.\n\n        this._controlLineState(false)\n            .then(() => {\n                this._stopPolling();\n                this.ctr.stopPoll();\n\n                this.ctr.removeAllListeners();\n                this.in.removeAllListeners();\n                this.out.removeAllListeners();\n\n                this.ifaceCdc.release(true, err => {\n                    if (err) { throw err; }\n                    this.ifaceData.release(true, err2 => {\n                        if (err2) { throw err2; }\n\n                        if (this._reattachCdcDriverAtFinal) {\n                            this.ifaceCdc.attachKernelDriver();\n                        }\n                        if (this._reattachDataDriverAtFinal) {\n                            this.ifaceData.attachKernelDriver();\n                        }\n\n                        debugInfo('All resources released');\n                        this.emit('close');\n                    });\n                });\n            });\n    }\n\n\n    // Performs a _controlTransfer() to set the line state.\n    // Set active to a truthy value to indicate there is something connected to the line,\n    // falsy otherwise.\n    // Returns a Promise.\n    _controlLineState(active) {\n        // This is documented in the PSTN doc of the USB spec, section 6.3.12\n        return this._controlTransfer(\n            0x21, // bmRequestType: [host-to-device, type: class, recipient: iface]\n            0x22, // SET_CONTROL_LINE_STATE\n            active ? 0x03 : 0x00, // 0x02 \"Activate carrier\" & 0x01 \"DTE is present\"\n            this.ifaceCdc.id, // interface index\n            Buffer.from([]), // No data expected back\n        );\n    }\n\n    // Performs a _controlTransfer to set the line coding.\n    // This includes bitrate, stop bits, parity, and data bits.\n    _controlSetLineCoding(baudRate = 9600) {\n        // This is documented in the PSTN doc of the USB spec, section 6.3.10,\n        // values for the data structure at the table in 6.3.11.\n        const data = Buffer.from([\n            0, 0, 0, 0, // Four bytes for the bitrate, will be filled in later.\n            0, // Stop bits. 0 means \"1 stop bit\"\n            0, // Parity. 0 means \"no parity\"\n            8, // Number of data bits\n        ]);\n\n        data.writeInt32LE(baudRate, 0);\n\n        debugInfo('Setting baud rate to ', baudRate);\n\n        return this._controlTransfer(\n            0x21, // bmRequestType: [host-to-device, type: class, recipient: iface]\n            0x20, // SET_LINE_CODING\n            0x00, // Always zero\n            this.ifaceCdc.id, // interface index\n            data,\n        );\n    }\n\n    // Performs a _controlTransfer to get the line coding.\n    // This includes bitrate, stop bits, parity, and data bits.\n    _controlGetLineCoding() {\n        // This is documented in the PSTN doc of the USB spec, section 6.3.11,\n        debugInfo('Requesting actual line coding values');\n\n        return this._controlTransfer(\n            0xA1, // bmRequestType: [device-to-host, type: class, recipient: iface]\n            0x21, // GET_LINE_CODING\n            0x00, // Always zero\n            this.ifaceCdc.id, // interface index\n            7 // Length of data expected back\n        ).then(data => {\n            const baudRate = data.readInt32LE(0);\n            const rawStopBits = data.readInt8(4);\n            const rawParity = data.readInt8(5);\n            const dataBits = data.readInt8(6);\n\n            let stopBits;\n            let parity;\n            switch (rawStopBits) {\n                case 0: stopBits = 1; break;\n                case 1: stopBits = 1.5; break;\n                case 2: stopBits = 2; break;\n                default: throw new Error('Invalid value for stop bits received (during a GET_LINE_CODING request)');\n            }\n            switch (rawParity) {\n                case 0: parity = 'none'; break;\n                case 1: parity = 'odd'; break;\n                case 2: parity = 'even'; break;\n                case 3: parity = 'mark'; break;\n                case 4: parity = 'space'; break;\n                default: throw new Error('Invalid value for parity received (during a GET_LINE_CODING request)');\n            }\n\n            debugInfo('Got line coding: ', data);\n            debugInfo('Reported baud rate: ', baudRate);\n            debugInfo('Reported stop bits: ', stopBits);\n            debugInfo('Reported parity: ', parity);\n            debugInfo('Reported data bits: ', dataBits);\n\n            return data;\n        });\n    }\n\n    // The device's controlTransfer, wrapped as a Promise\n    _controlTransfer(bmRequestType, bRequest, wValue, wIndex, dataOrLength) {\n        return new Promise((res, rej) => {\n            this.device.controlTransfer(\n                bmRequestType,\n                bRequest,\n                wValue,\n                wIndex,\n                dataOrLength,\n                ((err, data) => (err ? rej(err) : res(data))),\n            );\n        });\n    }\n\n\n    // Given an instance of Device (from the 'usb' library), opens it, looks through\n    // its interfaces, and creates an instance of UsbStream per interface which\n    // looks like a CDC ACM control interface (having the right descriptor and endpoints).\n    //\n    // The given Device must be already open()ed. Conversely, it has to be close()d\n    // when the stream is no longer used, or if this method throws an error.\n    //\n    // Returns an array of instances of UsbCdcAcm.\n    static fromUsbDevice(device, options = {}) {\n        const ifaces = device.interfaces;\n\n        for (let i = 0, l = ifaces.length; i < l; i += 1) {\n            const iface = ifaces[i];\n\n            if (assertCdcInterface(iface) !== false) {\n                return new UsbCdcAcm(iface, options);\n            }\n        }\n\n        throw new Error('No valid CDC interfaces found in USB device');\n    }\n}\n"],"names":["const","let","super","this","Duplex"],"mappings":"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"}